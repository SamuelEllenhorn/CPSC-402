PDefs.   Program ::= [Def] ; 

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

DUsing.     Def     ::= "using" QConst ";"; --added using to keywords from identifiers or statements for grade.cc
DTypedef.   Def     ::= "typedef" Type Id ";"; --added for grade 
--DTypedef. Def ::= "typedef" Type TypedefName ";" ;
--DTypedefName. TypedefName ::= Id ;


terminator Def "" ; 



ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

terminator Stm "" ;-- end of statement can be empty


--deleted 25+25 for grade

ELString. Exp16 ::= Exp16 String; --added for grade.cc: A string can be a string followed by another string
EBString. Exp16 ::= String; --Bare string added for grade.cc

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EString. Exp15  ::= Exp16 ; -- changed from String to Exp16

EId.     Exp15  ::= QConst; --changed from Id to QConst for Hello
                                 
 

EApp.    Exp15  ::= QConst "(" [Exp] ")" ; --^^


EDot.   Exp14  ::= Exp15 "." Exp14 ;  --added for grade
EPIncr.  Exp14  ::= Exp15 "++" ; --post inc
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ; --pre inc
EDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;--higher priority
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;


EshiftL.    Exp10 ::= Exp10 "<<" Exp11;  --added for hello.cc
EshiftR.    Exp10 ::= Exp10 ">>" Exp11;    --added for hello.cc
--Exp 10 was not in use,


ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;--relational
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;

EEq.     Exp8   ::= Exp8  "==" Exp9 ;--bool
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;--lower priority
EAss.    Exp2   ::= Exp3 "=" Exp2 ;

internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ; --only place a col used to show

coercions Exp 15 ;

separator Exp "," ;
-------------------added for grade------------
--vector<double> homework; //this is a templated type

QConstName. QConst ::= Name ; -- consists of a name
QConstList. QConst ::= QConst "::" Name ; -- names can be joined to form list
NameId.     Name   ::= Id ; -- names can be an id
NameTempId. Name   ::= Id "<" [Type] ">" ; -- names can be an id with template type

separator nonempty Type ","; -- add a separator so that template args can be listed (certain data types have two args like maps. or some can take a sorting function, etc...)

------------------end of grade---------------------------------------




-------changed/added for grade-----------------
TypeQConst. Type ::= QConst ; -- a type for qualified constants
TypePreModify. Type ::= PreModifier Type ; -- a new type with a modifier to another type
TypePostModifiy. Type ::= Type PostModifier ; -- add to modify types post
--TypeTypdef. Type ::= TypedefName ; -- add typedefs to types

rules Type   ::= "bool" | "int" | "double" | "void" | "char"; -- add char here

rules PreModifier ::= "const" ; -- adding new rules pre-modifying types
rules PostModifier ::= "&" | "*"; -- adding new rules for post-modifying types
---------------------------------------------------


token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
